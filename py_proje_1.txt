# Anıl Erdoğan - Akın Turan
# 220501006 - 220501013
# Bilgisayar Mühendisliği - Bilgisayar


import tkinter as tk
import random


class Ball:

    def __init__(self, canvas, x, y, radius, color, speed):

        self.canvas = canvas
        self.radius = radius
        self.color = color
        self.speed_x = random.choice([-speed, speed])
        self.speed_y = random.choice([-speed, speed])
        self.ball = canvas.create_oval(x - radius, y - radius, x + radius, y + radius, fill=color)

    def animation(self):

        coords = self.canvas.coords(self.ball)
        x1, y1, x2, y2 = coords

        if x1 <= 0 or x2 >= self.canvas.winfo_width():
            self.speed_x *= -1

        if y1 <= 0 or y2 >= self.canvas.winfo_height():
            self.speed_y *= -1

        self.canvas.move(self.ball, self.speed_x, self.speed_y)


class AnimationScreen:

    def __init__(self, root):
        self.root = root
        self.root.title("Animation Screen")
        self.root.geometry("1200x620")
        self.canvas = tk.Canvas(root, width=800, height=600, bg="turquoise")
        self.canvas.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        menu_frame = tk.Frame(root, bg="white")
        menu_frame.pack(fill=tk.Y, side=tk.LEFT)

        start_button = tk.Button(menu_frame, text="START", command=self.start)
        start_button.pack(pady=5)

        stop_button = tk.Button(menu_frame, text="STOP", command=self.stop)
        stop_button.pack(pady=5)

        reset_button = tk.Button(menu_frame, text="RESET", command=self.reset)
        reset_button.pack(pady=5)

        speed_up_button = tk.Button(menu_frame, text="Speed Up", command=self.speed_up)
        speed_up_button.pack(pady=5)

        add_ball_button = tk.Button(menu_frame, text="Add Ball", command=self.add_ball)
        add_ball_button.pack(pady=5)

        exit_button = tk.Button(menu_frame, text="ÇIKIŞ", command=self.exit)
        exit_button.pack(pady=5)

        self.selected_color = "red"
        self.selected_size = 10
        self.balls = []
        self.running = False
        self.speed = 5

        self.color_button(menu_frame, "red")
        self.color_button(menu_frame, "blue")
        self.color_button(menu_frame, "yellow")

        self.size_button(menu_frame, 10)
        self.size_button(menu_frame, 20)
        self.size_button(menu_frame, 30)

        self.animate()

    def color_button(self, frame, color):

        color_button = tk.Button(frame, bg=color, command=lambda: self.select_color(color), width=4, height=2)
        color_button.pack(pady=5)

    def size_button(self, frame, size):

        button_canvas = tk.Canvas(frame, width=size * 2, height=size * 2, bg="white", highlightthickness=0)
        button_canvas.pack(pady=5)

        button_canvas.create_oval(2, 2, size * 2, size * 2, fill="gray")

        button_canvas.bind("<Button-1>", lambda event, s=size: self.select_size(s))

    def select_size(self, size):
        self.selected_size = size

    def select_color(self, color):
        self.selected_color = color

    def start(self):
        self.running = True

    def stop(self):
        self.running = False

    def reset(self):

        self.running = False

        for ball in self.balls:
            self.canvas.delete(ball.ball)

        self.balls = []

        self.speed = 5

    def speed_up(self):

        self.speed += 5

        for ball in self.balls:
            ball.speed_x = ball.speed_x / abs(ball.speed_x) * self.speed
            ball.speed_y = ball.speed_y / abs(ball.speed_y) * self.speed

    def add_ball(self):

        x = random.randint(20, 780)
        y = random.randint(20, 580)
        self.balls.append(Ball(self.canvas, x, y, self.selected_size, self.selected_color, self.speed))

    def exit(self):
        self.root.destroy()

    def animate(self):

        if self.running:

            for ball in self.balls:
                ball.animation()

        self.root.after(30, self.animate)


root = tk.Tk()
app = AnimationScreen(root)
root.mainloop()